# Generated by Selenium IDE
import pytest
import time
import json
import os
import re
import pyperclip
from os.path import join, dirname
import chromedriver_binary
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
from selenium.webdriver.support.select import Select
from dotenv import load_dotenv
import boto3
import datetime


class ScrapingDLSite():
  def __init__(self,connection):
    self.driver = webdriver.Chrome()
    self.created_at = datetime.datetime.now().strftime('%Y-%m-%d')
    self.transition_interval = 5
    self.table_name = "ArtCollection"
    self.shop_name = "DLSite"
    self.dynamodb = connection

  def __del__(self):
    self.driver.close()
    self.driver.quit()
  
  def wait_for_window(self, timeout = 2):
    time.sleep(round(timeout / 1000))
    wh_now = self.driver.window_handles
    wh_then = self.vars["window_handles"]
    if len(wh_now) > len(wh_then):
      return set(wh_now).difference(set(wh_then)).pop()
  
  def start_scraping(self):

    self.driver.get("https://www.dlsite.com/index.html")
    self.driver.set_window_size(1440, 797)

    # print web site.
    WebDriverWait(self.driver, 60).until(expected_conditions.element_to_be_clickable((By.XPATH, "(//a[contains(text(),\'同人\')])[2]")))
    self.driver.find_element(By.XPATH, "(//a[contains(text(),\'同人\')])[2]").click()

    # age validation
    # this popup is shown when you visit first time.
    try:
      WebDriverWait(self.driver, 60).until(expected_conditions.element_to_be_clickable((By.CSS_SELECTOR, "li.btn_yes.btn-approval > a")))
      self.driver.find_element(By.CSS_SELECTOR, "li.btn_yes.btn-approval > a").click()
    except:
      pass
    
    time.sleep(self.transition_interval)

    # login user.
    WebDriverWait(self.driver, 60).until(expected_conditions.element_to_be_clickable((By.LINK_TEXT, "ログイン")))
    self.driver.find_element(By.LINK_TEXT, "ログイン").click()

    WebDriverWait(self.driver, 60).until(expected_conditions.element_to_be_clickable((By.ID, "form_id")))
    self.driver.find_element(By.ID, "form_id").click()
    self.driver.find_element(By.ID, "form_id").send_keys(os.environ.get("DLSITE_ID"))

    WebDriverWait(self.driver, 60).until(expected_conditions.element_to_be_clickable((By.ID, "form_password")))
    self.driver.find_element(By.ID, "form_password").click()
    self.driver.find_element(By.ID, "form_password").send_keys(os.environ.get("DLSITE_PASSWORD"))

    WebDriverWait(self.driver, 60).until(expected_conditions.element_to_be_clickable((By.CSS_SELECTOR, ".type-clrDefault")))
    self.driver.find_element(By.CSS_SELECTOR, ".type-clrDefault").click()

    # close modal window for qupon. qupon is shown when user is just login.
    # this popup dont know to show
    # you dont know this popup show or not.
    # このポップアップが表示されるかどうか分からない。
    try:
      WebDriverWait(self.driver, 60).until(expected_conditions.element_to_be_clickable((By.CSS_SELECTOR, "div > div.modal_close")))
      self.driver.find_element(By.CSS_SELECTOR, "div > div.modal_close").click()
    except:
      pass
    
    time.sleep(self.transition_interval)
    # read ArtName list file
    with open(join(dirname(__file__),'ArtName.txt')) as f:
      for line in f.readlines():
        # Begining of line [#], this line is ignore.
        if line.startswith('#') or line in ['',None]:
          continue
        
        ArtName = line

        # search for keyword using exact match. and go to page search result.
        WebDriverWait(self.driver, 60).until(expected_conditions.element_to_be_clickable((By.ID, "search_text")))
        # clear the input box for 
        self.driver.find_element(By.ID, "search_text").clear()
        self.driver.find_element(By.ID, "search_text").click()
        # self.driver.find_element(By.ID, "search_text").send_keys("\"{}\"".format(ArtName))
        self.driver.find_element(By.ID, "search_text").send_keys("{}".format(ArtName))
        self.driver.find_element(By.ID, "search_text").send_keys(Keys.ENTER)

        # search result you
        # this operation is failuer is doesent looking for Art.

        try:
          WebDriverWait(self.driver, 60).until(expected_conditions.element_to_be_clickable((By.CSS_SELECTOR, ".search_result_img_box_inner a[title='{}']".format(ArtName))))
          # WebDriverWait(self.driver, 60).until(expected_conditions.element_to_be_clickable((By.LINK_TEXT, ArtName)))
          # self.driver.find_element(By.LINK_TEXT, "{}".format(ArtName)).click()
          self.driver.find_element(By.CSS_SELECTOR, ".search_result_img_box_inner a[title='{}']".format(ArtName)).click()
        except:
          continue
        
        time.sleep(self.transition_interval)

        # url からArtIdを取得。
        # ex) https://www.dlsite.com/pro/work/=/product_id/VJ009935.html -> VJ000935
        ShopArtId = (self.driver.current_url.rsplit('/',1)[-1]).split('.')[0]

        # go to create affiliate link page
        WebDriverWait(self.driver, 60).until(expected_conditions.element_to_be_clickable((By.LINK_TEXT, "アフィリエイトリンク作成"))) 
        self.driver.find_element(By.LINK_TEXT, "アフィリエイトリンク作成").click()

        WebDriverWait(self.driver, 60).until(expected_conditions.element_to_be_clickable((By.ID, "afid"))) 
        self.driver.find_element(By.ID, "afid").click()
        dropdown = self.driver.find_element(By.ID, "afid")

        select = Select(dropdown)
        select.select_by_visible_text("{} ({})".format(os.environ.get("DLSITE_AFFILIATE_ID"),os.environ.get("DLSITE_AFFILIATE_SITE")))

        # copy affliate link url.
        WebDriverWait(self.driver, 60).until(expected_conditions.element_to_be_clickable((By.CSS_SELECTOR, "#affiliate_link_box button.copy_btn._link_only")))
        self.driver.find_element(By.CSS_SELECTOR, "#affiliate_link_box button.copy_btn._link_only").click()

        AffiliateUrl = pyperclip.paste()

        # copy SmallImg link url
        WebDriverWait(self.driver, 60).until(expected_conditions.element_to_be_clickable((By.CSS_SELECTOR, "#preview_mini img.target_type"))) 
        AffiliateSmallImageUrl = self.driver.find_element(By.CSS_SELECTOR, "#preview_mini img.target_type").get_attribute("src")

        # copy MiddleImg link url
        WebDriverWait(self.driver, 60).until(expected_conditions.element_to_be_clickable((By.CSS_SELECTOR, "#preview_thum img.target_type"))) 
        AffiliateMiddleImageUrl = self.driver.find_element(By.CSS_SELECTOR, "#preview_thum img.target_type").get_attribute("src")

        # copy SmallImg link url
        WebDriverWait(self.driver, 60).until(expected_conditions.element_to_be_clickable((By.CSS_SELECTOR, "#preview_main img.target_type"))) 
        AffiliateBigImageUrl = self.driver.find_element(By.CSS_SELECTOR, "#preview_main img.target_type").get_attribute("src")

        PlayerEmbed = []
        try:
          WebDriverWait(self.driver, 60).until(expected_conditions.element_to_be_clickable((By.CSS_SELECTOR, ".main_modify_box button.copy_btn[data-content-selector='#chobit_player_embed_url']"))) 
          self.driver.find_element(By.CSS_SELECTOR, ".main_modify_box button.copy_btn[data-content-selector='#chobit_player_embed_url']").click()
          PlayerEmbed.append(
            {
              'S': pyperclip.paste()
            }
          )
        except:
          pass
        
        # player
        item = {
            'ShopArtId': {
                'S': ShopArtId,
            },
            'ShopName': {
                'S': self.shop_name
            },
            'ArtName': {
                'S': ArtName,
            },
            'AffiliateUrl': {
                'S': AffiliateUrl,
            },
            'AffiliateBigImageUrl': {
                'S': AffiliateBigImageUrl,
            },
            'AffiliateMiddleImageUrl': {
                'S': AffiliateMiddleImageUrl,
            },
            'AffiliateSmallImageUrl': {
                'S': AffiliateSmallImageUrl,
            },
            'PlayerEmbed': {
                'L': PlayerEmbed
            },
            'Gallery': {
                'L': [
                  {
                    'S': ''
                  }
                ],
            },
            'CreatedAt': {
                'S': self.created_at,
            },
        }

        self.dynamodb.put_item(TableName=self.table_name, Item=item)

def create_dynamodb_connection():
  # dynamoDBLocal is used, if Environment Variable HOST or PORT isnt setten.
  connection = None
  if os.environ.get("HOST") in [None,'']:
      connection = boto3.client('dynamodb')

  else:
    connection = boto3.client(
      'dynamodb',
      endpoint_url="http://{}:{}".format(os.environ.get("HOST"),os.environ.get("PORT"))
    )

  return connection

def set_environment_variable():

  # load environment variable
  load_dotenv(verbose=True)

  dotenv_path = join(dirname(__file__), '.env')
  load_dotenv(dotenv_path)

if __name__ == '__main__':

  set_environment_variable()

  dynamodb = create_dynamodb_connection

  instance = ScrapingDLSite(dynamodb)

  instance.start_scraping()
